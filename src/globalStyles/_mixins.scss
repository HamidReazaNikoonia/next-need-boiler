/* GLOBAL MIXINS
--------------------------------------------- */

/* AUTO SCALING FOR TYPE WITH MIN/MAX SIZES
  @param {Number}  $responsive  - Viewport-based size
  @param {Number}  $min         - Minimum font size (px)
  @param {Number}  $max         - Maximum font size (px) (optional)
  @param {Number}  $fallback    - Fallback for viewport-based units (optional)
  @example SCSS - 5vw size, 35px min & 150px max size + 50px fallback:
  @include responsive-font(5vw, 35px, 150px, 50px);
*/
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
    $responsive-unitless: $responsive / ($responsive - $responsive + 1);
    $dimension: if(unit($responsive) == 'vh', 'height', 'width');
    $min-breakpoint: $min / $responsive-unitless * 100;
  
    @media (max-#{$dimension}: #{$min-breakpoint}) {
      font-size: $min;
    }
  
    @if $max {
      $max-breakpoint: $max / $responsive-unitless * 100;
  
      @media (min-#{$dimension}: #{$max-breakpoint}) {
        font-size: $max;
      }
    }
  
    @if $fallback {
      font-size: $fallback;
    }
  
    font-size: $responsive;
  }
  
  // Reset
  @mixin reset {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }
  
  @mixin reset-list {
    @include reset;
    list-style: none;
  }
  
  @mixin reset-button {
    @include reset;
    border: 0;
    width: auto;
    overflow: visible;
    background: transparent;
    color: inherit;
    font: inherit;
    line-height: normal;
    outline: none;
    font-smoothing: inherit;
    -webkit-font-smoothing: inherit;
    -moz-osx-font-smoothing: inherit;
    -webkit-appearance: none;
  
    &::-moz-focus-inner {
      border: 0;
      padding: 0;
    }
  }
  
  @mixin clearfix {
    &:before,
    &:after {
      display: table;
      content: '';
      clear: both;
    }
  }
  
  // Used to prevent text selection on an element
  @mixin prevent-user-select {
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }
  
  /// Used to hide an element visually, but keeping it accessible for
  /// accessibility tools.
  @mixin visually-hidden {
    // Need to make sure we override any existing styles.
    position: absolute !important;
    top: 0;
    clip: rect(1px, 1px, 1px, 1px) !important;
    overflow: hidden !important;
    height: 1px !important;
    width: 1px !important;
    padding: 0 !important;
    border: 0 !important;
  }
  
  /// To be used on flex items. Resolves some common layout issues, such as
  /// text truncation not respecting padding or breaking out of container.
  /// https://css-tricks.com/flexbox-truncated-text/
  @mixin layout-flex-fix {
    min-width: 0;
    max-width: 100%;
  }
  
  @mixin border-radius($size, $side: false) {
    @if ($side == 'top') {
      border-top-left-radius: $size;
      border-top-right-radius: $size;
    } @else if ($side == 'bottom') {
      border-bottom-left-radius: $size;
      border-bottom-right-radius: $size;
    } @else if ($side == 'left') {
      border-top-left-radius: $size;
      border-bottom-left-radius: $size;
    } @else if ($side == 'right') {
      border-top-right-radius: $size;
      border-bottom-right-radius: $size;
    } @else {
      border-top-left-radius: $size;
      border-top-right-radius: $size;
      border-bottom-left-radius: $size;
      border-bottom-right-radius: $size;
    }
  }

  // You can pass width && height
  /* ===== Usage ===== */
  // You can pass width && height
  // @include box(200px, 300px);
   /* or just pass width and the height
     will default to the width value 
     @include box(200px);
  */
  @mixin box($width, $height: $width) {
    width: $width;
    height: $height;
  }


/* ===== Usage ===== */
//  @include font-size(12, 18, 1.2);

// returns
// font-size: 12px;
// line-height: 1.5; // 18 / 12
// letter-spacing: 0.1em;

  @mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
    font-size: $font-size * 1px;
    // font-size: $font-size * 0.1rem;
    // example using rem values and 62.5% font-size so 1rem = 10px
  
    @if $line-height==normal {
      line-height: normal;
    } @else {
      line-height: $line-height / $font-size;
    }
  
    @if $letter-spacing==normal {
      letter-spacing: normal;
    } @else {
      letter-spacing: #{$letter-spacing / $font-size}em;
    }
  }

  /**
  This is a mixin  use a lot for image masking but the
  idea is mostly to reduce lines since there is a lot
  of repetition when doing pseudo-elements
   */

   /* ===== Usage ===== */

  // @include pseudo(100px, 100px);
  @mixin pseudo(
  $width: 100%,
  $height: 100%,
  $display: inline-block,
  $pos: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}



/**
 this mixin comes in handy to handle breakpoints, add more as needed
*/

/* ===== Usage ===== */

/*
.site-header {
    padding: 2rem;
    font-size: 1.8rem;
    @include mq('tablet-wide') {
        padding-top: 4rem;
        font-size: 2.4rem;
    }
}
*/


$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

/*
 Quick mixin to hide or show an element, useful for fade in/out animations
*/

@mixin fade($type) {
  @if $type== "hide" {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s, opacity 1s;
  } @else if $type== "show" {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s, opacity 1s;
  }
}


@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}